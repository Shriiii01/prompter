version: '3.8'

services:
  # PromptGrammerly Prompt Enhancer Backend
  promptgrammerly-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: promptgrammerly-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=4
      - DEBUG=false
      - LOG_LEVEL=INFO
      # API Keys (set these in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - TOGETHER_API_KEY=${TOGETHER_API_KEY}
      # Database Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      # Rate Limiting
      - RATE_LIMIT_PER_MINUTE=60
      - RATE_LIMIT_PER_HOUR=1000
      # Circuit Breaker
      - CIRCUIT_BREAKER_FAILURE_THRESHOLD=5
      - CIRCUIT_BREAKER_RECOVERY_TIMEOUT=60
      # Health Check
      - HEALTH_CHECK_INTERVAL=30
      - HEALTH_CHECK_TIMEOUT=10
      # Monitoring
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    volumes:
      - ../backend:/app
      - ./logs:/app/logs
    networks:
      - ai-magic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ai-magic-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-magic-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai-magic-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ai-magic-network
    restart: unless-stopped
    depends_on:
      - ai-magic-backend
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-magic-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ai-magic-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-magic-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ai-magic-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai-magic-network:
    driver: bridge

# Development configuration
x-development: &development
  environment:
    - ENVIRONMENT=development
    - DEBUG=true
    - LOG_LEVEL=DEBUG
  volumes:
    - ../backend:/app
    - ./logs:/app/logs

# Production configuration
x-production: &production
  environment:
    - ENVIRONMENT=production
    - DEBUG=false
    - LOG_LEVEL=INFO
  restart: unless-stopped
  deploy:
    replicas: 2
    resources:
      limits:
        cpus: '1.0'
        memory: 1G
      reservations:
        cpus: '0.5'
        memory: 512M 